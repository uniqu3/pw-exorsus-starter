<?php
/**
*
*  Module PageimageAssistant - Pia
*
*  Version 1.0.0
*
*  This module assists in API usage of Pageimages
*
*  Author: Horst Nogajski, http://nogajski.de
*
*  https://processwire.com/talk/topic/8367-pia-pageimage-assistant/
*
*
*
*  ProcessWire 2.5.x
*  Copyright (C) 2010 by Ryan Cramer
*  Licensed under GNU/GPL v2, see LICENSE.TXT
*
*  http://www.processwire.com
*  http://www.ryancramer.com
*
*/

class PageimageAssistant extends WireData implements Module, ConfigurableModule {

    static protected $sharpeningValues = array('none', 'soft', 'medium', 'strong');

    const defaultRetinafyTemplate = '<img src="[URL]" width="[WIDTH]" height="[HEIGHT]" alt="[DESCRIPTION]" />';


    static public function isDebugMode() {
        return (true === wire('config')->debug && wire('user')->isLoggedin() && wire('user')->isSuperuser());
    }


    static public function getDefaultData() {
        $retinafy = array(
            'retinafy-template' => self::defaultRetinafyTemplate
        );
        return $retinafy;
    }


    static protected function getData() {
        $data1 = self::getDefaultData();
        $data2 = wire('modules')->getModuleConfigData(__CLASS__);
        return array_merge($data1, $data2);
    }


    public function init() {
        $this->addHook('Pageimage::pia', $this, 'PiaBallerina');
        $this->addHookbefore('Pageimage::crop', $this, 'PiaMakeCrop');
        $this->addHook('Pageimage::cover', $this, 'PiaMakeCover');
        $this->addHook('Pageimage::contain', $this, 'PiaMakeContain');
        $this->addHook('Pageimage::retinafy', $this, 'PiaCreateRetinafy');
        $this->addHook('Pageimage::hiDPI', $this, 'PiaCreateRetinafy');
        // now get all data and modify / update the $config vars
        $this->data = self::getData();
    }


    public function PiaCreateRetinafy($event) {
        // get the default properties
        $properties = array(
            '[URL]' => $event->object->url,
            '[WIDTH]' => intval($event->object->width / 2),
            '[HEIGHT]' => intval($event->object->height / 2),
            '[DESCRIPTION]' => $event->object->description
        );
        // check for custom property names
        $customPropertyNames = is_array($event->arguments(0)) ? $event->arguments(0) : array();
        foreach($customPropertyNames as $customProperty) {
            $properties['[' . strtoupper($customProperty) . ']'] = $event->object->$customProperty;
        }
        $search = array_keys($properties);
        $replace = array_values($properties);
        $event->return = str_replace($search, $replace, $this->data['retinafy-template']);
    }


    public function PiaBallerina($event) {
        $width = $height = 0;
        $options = $this->getSizeParams($width, $height, $event->arguments(0), '');
        $event->return = $event->object->size($width, $height, $options);
    }


    public function PiaMakeCrop($event) {
        // check if this event is intended to get worked out by Pia or by the pageimage::crop method
        if (is_numeric($event->arguments(0))) {
            $event->replace = false;
            return;
        }
        $width = $height = 0;
        $options = $this->getSizeParams($width, $height, $event->arguments(0), 'piacrop');
        if (!$this->upscaling && ($width > $event->object->width || $height > $event->object->height)) {
            $options = $this->getSizeParams($width, $height, $event->arguments(0), 'piacropfail');
            $wTarget = $width >= $event->object->width ? $event->object->width : $width;
            $hTarget = $height >= $event->object->height ? $event->object->height : $height;
        } else {
            $wTarget = $width;
            $hTarget = $height;
        }
        if (isset($options['cropping'])) {
            $options['cropping'] = '' === ImageSizer::croppingValueStr($options['cropping']) ? true : $options['cropping'];
        } else {
            $options['cropping'] = true;
        }
        $event->replace = true;
        $event->return = $event->object->size($wTarget, $hTarget, $options);
    }


    public function PiaMakeCover($event) {
        $width = $height = 0;
        $options = $this->getSizeParams($width, $height, $event->arguments(0), 'piacover');
        if (!$this->upscaling && ($width > $event->object->width || $height > $event->object->height)) {
            $options = $this->getSizeParams($width, $height, $event->arguments(0), 'piacoverfail');
            $width = $width >= $event->object->width ? $event->object->width : $width;
            $height = $height >= $event->object->height ? $event->object->height : $height;
        }
        $this->image = array('width'=>$event->object->width, 'height'=>$event->object->height);
        list($wTarget, $hTarget) = $this->getTargetDimensions($width, $height);
        $event->return = $event->object->size($wTarget, $hTarget, $options);
    }


    public function PiaMakeContain($event) {
        $width = $height = 0;
        $weighten = false;
        $suffix = 'piacontain';
        $options = $this->getSizeParams($width, $height, $event->arguments(0), $suffix, $weighten);
        if (isset($weighten) && true === $weighten) {
            $suffix = 'piacontweigh';
            $options = $this->weighten($event->object, $width, $height, $event->arguments(0), $suffix);
        }
        if (!$this->upscaling && ($width > $event->object->width && $height > $event->object->height)) {
            $options = $this->getSizeParams($width, $height, $event->arguments(0), $suffix . 'fail', $weighten);
            $wTarget = $width >= $event->object->width ? $event->object->width : $width;
            $hTarget = $height >= $event->object->height ? $event->object->height : $height;
        } else {
            $wTarget = $width;
            $hTarget = $height;
        }
        $options['cropping'] = false;
        $event->return = $event->object->size($wTarget, $hTarget, $options);
    }





    private function getSizeParams(&$width, &$height, $selectorString, $suffix, &$weighten='') {
        $validWeightenValues = array('on'=>'on', 'ON'=>'ON', '1'=>'1', '-1'=>'-1', 'true'=>'-1', 'TRUE'=>'-1', 'x1'=>'-1', 'x2'=>'-1', 'y1'=>'-1', 'y2'=>'-1');
        $validWeightenPrios = array('x1'=>'-1', 'x2'=>'-1', 'y1'=>'-1', 'y2'=>'-1');
        $options = self::typeCaster(
            array(
                'int' => array('width', 'height', 'size', 'square', 'quality'),
                'float' => array('defaultGamma'),
                'bool' => array('upscaling', 'cropping', 'forceNew', 'useUSM', 'useGD', 'autoRotation', 'keepICC', 'keepXMP', 'keepEXIF'),
                'str' => array('sharpening', 'suffix', 'weighten')
                ),
            self::selector2array($this->sanitizer->text($selectorString)));
        if (isset($options['defaultGamma']) && -1 == $options['defaultGamma']) $options['defaultGamma'] = intval(-1);
        $this->weightenPrio = null;
        $this->weightenCompression = null;
        $weighten = true;
        if (isset($options['weighten'])) {
            if (isset($validWeightenValues[$options['weighten']])) {
                if (isset($validWeightenPrios[$options['weighten']])) {
                    $this->weightenPrio = array(
                        strtolower(substr($options['weighten'], 0, 1)),
                        (2 == intval(substr($options['weighten'], 1, 1)) ? 2 : 1)
                        );
                        $suffix .= strval($this->weightenPrio[0] . $this->weightenPrio[1]);
                }
            }
            if (substr($options['weighten'], 0, 4) == 'comp' && is_numeric(substr($options['weighten'], 4))) {
                $this->weightenCompression = intval(substr($options['weighten'], 4));
                $this->weightenCompression = 0 < $this->weightenCompression && 100 > $this->weightenCompression ? $this->weightenCompression : null;
            }
            unset($options['weighten']);
        } else {
            $weighten = false;
        }
        if (isset($options['width'])) {
            $width = $options['width'];
            unset($options['width']);
        } else {
            $width = 0;
        }
        if (isset($options['height'])) {
            $height = $options['height'];
            unset($options['height']);
        } else {
            $height = 0;
        }
        if (isset($options['size'])) {
            $width = $options['size'];
            $height = $options['size'];
            unset($options['size']);
        }
        if (isset($options['square'])) {
            $width = $options['square'];
            $height = $options['square'];
            unset($options['square']);
        }
        $this->upscaling = isset($options['upscaling']) ? $options['upscaling'] : $this->config->imageSizerOptions['upscaling'];
        if (!$this->upscaling) { $suffix .= 'noup'; }
        if (isset($options['suffix'])) {
            if (is_string($options['suffix'])) {
                $options['suffix'] = array($suffix, $options['suffix']);
            } elseif (is_array($options['suffix'])) {
                array_push($options['suffix'], $suffix);
            } else {
                $options['suffix'] = $suffix;
            }
        } else {
            $options['suffix'] = $suffix;
        }
        return $options;
    }


    private function weighten(&$image, &$width, &$height, $selectorString, $suffix) {
        $box_x = $box_y = $weighten = 0;
        $options = $this->getSizeParams($width, $height, $selectorString, $suffix, $weighten);
        if (is_array($this->weightenPrio)) {
            if ($width == $height) {
                if ('x' == $this->weightenPrio[0]) {
                    $width  = ceil($width  / 100 * (2==$this->weightenPrio[1] ? 124 : 112));
                    $height = ceil($height / 100 * (2==$this->weightenPrio[1] ? 76 : 88));
                } elseif ('y' == $this->weightenPrio[0]) {
                    $width  = ceil($width  / 100 * (2==$this->weightenPrio[1] ? 76 : 88));
                    $height = ceil($height / 100 * (2==$this->weightenPrio[1] ? 124 : 112));
                }
                $suffix .= strval($this->weightenPrio[0] ) . strval($this->weightenPrio[1]);
            }
        }
        $box_x = $width;
        $box_y = $height;
        $proc = isset($this->weightenCompression) && 0 < $this->weightenCompression && 100 > $this->weightenCompression ? $this->weightenCompression : 38;

        // calculate ratio between image & wanted size
        $rX = $box_x / $image->width;
        $rY = $box_y / $image->height;

        // the least expensive, is taken for size caculation
        $width = $widthUC = min($rX, $rY) * $image->width;
        $height = $heightUC = min($rX, $rY) * $image->height;

        // $shrinkIt
        $i = 0;
        $array = array();
        $range = range(0, 100);    // create array
        $fraction = $proc / 100;
        // key of array, will be used by percentage value
        foreach ($range as $key) {
            $array[$key] = $i;
            $i = $i + $fraction;
        }
        // procent compare to box
        $proc = (int) ( $width * $height ) * 100 / ( $box_x * $box_y );
        $width = round($width - ($array[$proc] * $width / 100));
        $height = round($height - ($array[$proc] * $height / 100));

        // now calculate a bias
        $ratio = floatval(($image->width >= $image->height ? $image->width / $image->height : $image->height / $image->width));
        if ($ratio < 1.75) {
            $bias = 1.2;
        } elseif ($ratio < 2.1) {
            $bias = 1.17;
        } elseif ($ratio < 2.5) {
            $bias = 1.07;
        } else {
            $bias = 1;
        }
        if (!isset($this->weightenCompression) || null == $this->weightenCompression) {
            // apply the bias
            $width = intval($bias * $width);
            $height = intval($bias * $height);
        }
        return $options;
    }


    static private function typeCaster($typeDefinitions, $params) {
        if (!is_array($params)) return null;
        foreach($typeDefinitions as $type => $param) {
            foreach($param as $par) $$par = $type;
        } unset($type, $param, $typeDefinitions);
        $typecastedParams = array();
        $validBooleans = array(-1=>-1, 1=>1, '1'=>'1', '-1'=>'-1', 'on'=>'on', 'ON'=>'ON', 'true'=>'true', 'TRUE'=>'TRUE');
        foreach($params as $k => $v) {
            $swtch = isset($$k) ? $$k : '';
            switch($swtch) {
                case 'float': $typecastedParams[$k] = floatval($v); break;
                case 'int': $typecastedParams[$k] = intval($v); break;
                case 'str': $typecastedParams[$k] = strval($v); break;
                case 'bool': $typecastedParams[$k] = (bool) isset($validBooleans[$v]); break;
                default:
                    if (is_numeric($v)) $typecastedParams[$k] = (float) $v;
                    elseif (in_array($v, array('on', 'ON', 'true', 'TRUE', true))) $typecastedParams[$k] = true;
                    elseif (in_array($v, array('off', 'OFF', 'false', 'FALSE', false))) $typecastedParams[$k] = false;
                    else $typecastedParams[$k] = strval($v);
            }
        }
        return $typecastedParams;
    }


    static private function selector2array($selectorStr) {
        if (empty($selectorStr)) return;
        $selectors = new Selectors($selectorStr);
        $params = array();
        foreach($selectors as $selector) $params[$selector->field] = $selector->value;
        return $params;
    }


    private function getTargetDimensions($targetWidth, $targetHeight) {
        $pWidth = $targetWidth;
        $pHeight = $targetHeight;

        $img = $this->image;

        if(!$targetHeight) $targetHeight = round(($targetWidth / $img['width']) * $img['height']);
        if(!$targetWidth) $targetWidth = round(($targetHeight / $img['height']) * $img['width']);

        $originalTargetWidth = $targetWidth;
        $originalTargetHeight = $targetHeight;

        if($img['width'] < $img['height']) {
            $pHeight = $this->getProportionalHeight($targetWidth);
        } else {
            $pWidth = $this->getProportionalWidth($targetHeight);
        }

        if($pWidth < $targetWidth) {
            // if the proportional width is smaller than specified target width
            $pWidth = $targetWidth;
            $pHeight = $this->getProportionalHeight($targetWidth);
        }

        if($pHeight < $targetHeight) {
            // if the proportional height is smaller than specified target height
            $pHeight = $targetHeight;
            $pWidth = $this->getProportionalWidth($targetHeight);
        }

        return array(
                0 => (int) $pWidth,
                1 => (int) $pHeight
                );
    }


    private function getProportionalWidth($targetHeight) {
        $img = $this->image;
        return ceil(($targetHeight / $img['height']) * $img['width']);
    }


    private function getProportionalHeight($targetWidth) {
        $img = $this->image;
        return ceil(($targetWidth / $img['width']) * $img['height']);
    }



    /**
    * with a version near 2.5.16, PW logs / can log modules API actions,
    * this can lead very quick to thousands of logentries with Pia (or Croppableimages)
    * so we suppress logs for our config data merging
    */
    private static function writeModuleConfigData($classname, &$data) {
        $logs = wire('config')->logs;                              // get current log status
        if (!is_array($logs) && !isset($logs['modules'])) {
            wire('modules')->saveModuleConfigData($classname, $data);
            return;
        }
        wire('config')->logs = array();                            // switch off logging for modules
        wire('modules')->saveModuleConfigData($classname, $data);  // save config data
        wire('config')->logs = $logs;                              // toggle on logging for modules
    }


    static public function getModuleConfigInputfields(array $data) {

        $data = self::getData();
        $modules = wire('modules');
        $form = new InputfieldWrapper();

        # >>> retinafy
        $fieldset = $modules->get('InputfieldFieldset');
        $fieldset->label = 'HiDPI / Retinafy Options';
        $fieldset->attr('name', '_retinafyOptions');
        $fieldset->description = __('here you can define the template that should be used with the "HiDPI" or "retinafy" method');
        $fieldset->collapsed = Inputfield::collapsedYes;

            $field = $modules->get('InputfieldText');
            $field->label = 'HiDPI / Retinafy Template';
            $field->attr('name+id', 'retinafy-template');
            $field->attr('value', $data['retinafy-template']);
            $field->description = __('default is: ' . self::defaultRetinafyTemplate);
            $field->columnWidth = 100;
            $fieldset->add($field);

        $form->add($fieldset);
        # <<< retinafy

        return $form;
    }

}
